---
include:
  - project: infrastructure/gitlab-ci-helper
    file: /templates/julia.yml

# Disable GitLab CI's default cache policy of "pull-push"
# https://docs.gitlab.com/ee/ci/yaml/#cache-policy
# https://docs.gitlab.com/ce/ci/caching/index.html#disabling-cache-on-specific-jobs
cache: {}

variables:
  AMAZON_LINUX_IMAGE: amazonlinux:2
  STACK_NAME_PREFIX: sandbox-awsclustermanagers
  ONLINE: ""

# Variables that require shell execution or depend on a variable that does
.setup: &setup
  |
  echo "$common_functions" > common && source common
  # Make unique stacks for each executed pipeline for `master`. This will allow fast successive merges
  # to work correctly.
  STACK_NAME=$(stack_name $STACK_NAME_PREFIX)
  ACCOUNT_ID=$(aws_account_id)
  REGION=$(aws_region)
  export AWS_DEFAULT_REGION=$(echo $REGION)

"Setup Environment":
  stage: setup
  except:
    - tags
    - master
    - /^.+\/.*master$/  # e.g. jh/validate-master
  when: always
  environment:
    name: branch/$CI_COMMIT_REF_SLUG
    on_stop: "Delete Environment"
  script:
    - echo "Setting up environment"

"Create Stack":
  stage: setup
  tags:
    - docker-ci
    - ci-account
  image: $AMAZON_LINUX_IMAGE
  before_script:
    - *setup
    - install_awscli
    - install_cloudspy
  script:
    - aws cloudformation validate-template --template-body file://test/batch.yml
    - |
      aws-create-stack \
        --role-arn arn:aws:iam::${ACCOUNT_ID}:role/CloudFormationAdmin \
        --stackname $STACK_NAME \
        --template-body ./test/batch.yml \
        --wait \
        --params CIRoleArn=arn:aws:iam::${ACCOUNT_ID}:role/GitLabCIRunnerRole

"Online Tests":
  stage: test
  tags:
    - amzn2
    - docker-build
    - ci-account
  variables:
    ONLINE: "docker, batch"  # Runs the online tests for AWS Batch & Docker
  before_script:
    - curl -sS -o julia-ci https://gitlab.invenia.ca/infrastructure/gitlab-ci-helper/raw/master/julia-ci
    - chmod +x julia-ci
    - ./julia-ci install-cred-helper
    - ./julia-ci install $JULIA_VERSION
    - *setup
    - install_awscli
    - install_cloudspy
    - assume_test_role
  script:
    # Execute online tests
    - source julia-ci export
    - STACK_NAME=$STACK_NAME ./julia-ci test
    - ./julia-ci coverage
  after_script:
    - ./julia-ci clean
    - sleep 5
    - *setup
    - export CI_COMMIT_SHA_SHORT=$(git rev-parse --short $CI_COMMIT_SHA)
    - docker rmi $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/aws-batch-manager-test:$CI_COMMIT_SHA_SHORT
  extends: .test_shell_1_0


# Execute the Docker tests from within Docker itself
"Online Tests (within Docker)":
  stage: test
  tags:
    - docker-build
  variables:
    BASE_IMAGE: 468665244580.dkr.ecr.us-east-1.amazonaws.com/julia-baked:1.0
    TEST_IMAGE: aws-cluster-managers:pipeline-${CI_PIPELINE_ID}
  script:
    - docker pull $BASE_IMAGE  # Make sure image is up-to-date
    - docker build -t $TEST_IMAGE --build-arg BASE_IMAGE=$BASE_IMAGE .
    - docker run --rm -e ONLINE=docker -v /var/run/docker.sock:/var/run/docker.sock $TEST_IMAGE
  after_script:
    - docker rmi $TEST_IMAGE $BASE_IMAGE

.delete: &delete
  tags:
    - docker-ci
    - ci-account
  image: $AMAZON_LINUX_IMAGE
  before_script:
    - *setup
    - install_awscli
    - install_cloudspy
    - assume_test_role
  script:
    - eval $(aws-stack-outputs $STACK_NAME)
    # Terminate any jobs that are still running as running jobs can keep the EC2 instances
    # running which makes the stack fail to delete cleanly. Jobs can still be running in
    # scenarios where they are stuck or the CI hits the timeout.
    - aws-clear-queue $ManagerJobQueueArn $WorkerJobQueueArn --reason "Deleting CloudFormation stack" --disable --wait
    # Empty the ECR repository
    - image_ids=$(aws ecr list-images --repository-name $Ecr --query "imageIds[*]")
    - '[[ "$image_ids" != "[]" ]] && aws ecr batch-delete-image --repository-name $Ecr --image-ids "$image_ids"'
    - unset AWS_PROFILE  # Switch to back to CI runner role
    - |
      aws cloudformation delete-stack \
        --role-arn arn:aws:iam::${ACCOUNT_ID}:role/CloudFormationAdmin \
        --stack-name $STACK_NAME
    - aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME

"Delete Environment":
  stage: teardown
  except:
    - tags
    - master
    - /^.+\/.*master$/
  when: manual
  environment:
    name: branch/$CI_COMMIT_REF_SLUG
    action: stop
  dependencies:
    - "Create Stack"
  variables:
    GIT_STRATEGY: none  # Avoid checking out a branch after deletion
  <<: *delete

"Delete Stack":
  stage: teardown
  only:
    - tags
    - master
    - /^.+\/.*master$/
  when: always
  <<: *delete

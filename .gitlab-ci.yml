stages:
  - test
  - coverage
  - docs

.test_template: &test_definition
  artifacts:
    name: "$CI_JOB_NAME coverage"
    expire_in: 1 week
    paths:
      - "$CI_JOB_NAME coverage/"
  before_script:
    - curl -s -o julia-ci https://gitlab.invenia.ca/infrastructure/gitlab-ci-helper/raw/master/julia-ci
    - chmod +x julia-ci
    - ./julia-ci install $JULIA_VERSION
  script:
    - source julia-ci export
    - julia --compilecache=no -e "Pkg.clone(pwd()); Pkg.build(\"$PKG_NAME\"); Pkg.test(\"$PKG_NAME\"; coverage=true)"
    - ./julia-ci coverage
  after_script:
    - ./julia-ci clean

.test_tmp_release: &test_release
  variables:
    JULIA_VERSION: release
  <<: *test_definition

.test_tmp_nightly: &test_nightly
  variables:
    JULIA_VERSION: nightly
  allow_failure: true
  <<: *test_definition


"Julia release, OS X":
  tags:
    - osx
  <<: *test_release

"Julia release, Linux (amd64)":
  tags:
    - linux
    - amd64
  <<: *test_release

"Julia release, Linux (i386)":
  tags:
    - linux
    - i386
  <<: *test_release

# Note: Julia 0.6 tests have issues with AWSClusterManagers.jl and sometimes cause the CI build to hang.
# We cannot use "allow_failure" here as the processes don't fail they just get stuck.

# "Julia nightly, OS X":
#   tags:
#     - osx
#   <<: *test_nightly

# "Julia nightly, Linux (amd64)":
#   tags:
#     - linux
#     - amd64
#   <<: *test_nightly

# "Julia nightly, Linux (i386)":
#   tags:
#     - linux
#     - i386
#   <<: *test_nightly


"Coverage":
  stage: coverage
  coverage: /Test Coverage (\d+\.\d+%)/
  artifacts:
    name: combined_coverage
    expire_in: 1 week
    paths:
      - combined_coverage/
  tags:
    - linux
    - amd64
  script:
    - genhtml --version
    - mkdir $CI_PROJECT_DIR/combined_coverage
    - cp -r $CI_PROJECT_DIR/src $CI_PROJECT_DIR/combined_coverage/
    - ls */*.info | xargs -I{} echo "--summary \"{}\"" | xargs lcov --directory src
    - echo "Test Coverage $(genhtml -o $CI_PROJECT_DIR/combined_coverage --no-prefix */coverage.info 2>&1 | grep lines | awk '{print $2}')"
    - find $CI_PROJECT_DIR/combined_coverage -type f -name "*.jl" -delete


"Documentation":
  stage: docs
  tags:
    - docs
  only:
    - master
    - develop
    - docs
    - tags  # special keyword for all tags
  before_script:
    - curl -s -o julia-ci https://gitlab.invenia.ca/infrastructure/gitlab-ci-helper/raw/master/julia-ci
    - chmod +x julia-ci
    - ./julia-ci install release
  script:
    - source julia-ci export
    - julia --depwarn=no -e "Pkg.clone(pwd()); Pkg.build(\"$PKG_NAME\"); Pkg.add(\"Documenter\"); Pkg.checkout(\"Documenter\")"
    - julia --depwarn=no -e "cd(Pkg.dir(\"$PKG_NAME\", \"docs\")); include(\"make.jl\")"
    - julia --depwarn=no -e "const DOCS_DIR = joinpath(\"/mnt\", \"docs\", \"$CI_PROJECT_NAMESPACE\", \"$CI_PROJECT_NAME\", \"$CI_BUILD_REF_NAME\"); mkpath(DOCS_DIR); cp(Pkg.dir(\"$PKG_NAME\", \"docs\", \"build\"), DOCS_DIR; remove_destination=true, follow_symlinks=true)"
  after_script:
    - ./julia-ci clean

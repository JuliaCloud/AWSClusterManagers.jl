name: CI
on:
  push:
    branches:
      - master
      - staging
      - trying
    tags: '*'
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          # - "1.0"   # LTS
          - "1"     # Latest release
          # - "nightly"
        os:
          - ubuntu-latest
          # - macOS-latest
          # - windows-latest
        arch:
          - x64
          # - x86
        exclude:
          # Test 32-bit only on Linux
          - os: macOS-latest
            arch: x86
          - os: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: AWSClusterManagers-jl-0000
          template: test/batch.yml

      - run: |
          aws sts get-caller-identity

      # - uses: julia-actions/setup-julia@v1
      #   with:
      #     version: ${{ matrix.version }}
      #     arch: ${{ matrix.arch }}
      # - uses: actions/cache@v1
      #   env:
      #     cache-name: cache-artifacts
      #   with:
      #     path: ~/.julia/artifacts
      #     key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-test-${{ env.cache-name }}-
      #       ${{ runner.os }}-test-
      #       ${{ runner.os }}-
      # - uses: julia-actions/julia-buildpkg@v1
      # - run: |
      #     aws cloudformation validate-template --template-body file://test/batch.yml
      #     aws-deploy-stack \
      #       --role-arn arn:aws:iam::${ACCOUNT_ID}:role/CloudFormationAdmin \
      #       --stack-name $STACK_NAME \
      #       --template-file ./test/batch.yml \
      #       --wait \
      #       --params CIRoleArn=arn:aws:iam::${ACCOUNT_ID}:role/GitLabCIRunnerRole
      # - uses: julia-actions/julia-runtest@v1
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     ONLINE: "docker, batch, batch-node"
      # - uses: julia-actions/julia-processcoverage@v1
      # - uses: codecov/codecov-action@v1
      #   with:
      #     file: lcov.info

  # docs:
  #   name: Documentation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: julia-actions/setup-julia@v1
  #       with:
  #         version: "1"
  #     - run: |
  #         julia --project=docs -e '
  #           using Pkg
  #           Pkg.develop(PackageSpec(path=pwd()))
  #           Pkg.instantiate()'
  #     - run: |
  #         julia --project=docs -e '
  #           using Documenter: DocMeta, doctest
  #           using AWSClusterManagers
  #           DocMeta.setdocmeta!(AWSClusterManagers, :DocTestSetup, :(using AWSClusterManagers); recursive=true)
  #           doctest(AWSClusterManagers)'
  #     - run: julia --project=docs docs/make.jl
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}

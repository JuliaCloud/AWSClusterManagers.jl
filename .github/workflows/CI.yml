name: CI
on:
  push:
    branches:
      - main
      - staging
      - trying
    tags: '*'
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - "1.0"   # LTS
          - "1"     # Latest release
          - "nightly"
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
          - x86
        exclude:
          # Test 32-bit only on Linux
          - os: macOS-latest
            arch: x86
          - os: windows-latest
            arch: x86
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: actions/cache@v1
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info

  online-test:
    name: "Online Tests"
    runs-on: ubuntu-latest
    env:
      STACK_NAME: AWSClusterManagers-jl
      ONLINE: "docker, batch, batch-node"
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: "1"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Validate AWS CloudFormation template
        run: aws cloudformation validate-template --template-body file://test/batch.yml

      # Note: Using Bors will restrict us to only having one workflow running at a given time.
      # Because of this we can safely use a single CFN stack and just update the stack to the
      # state of the current branch.
      - name: Deploy to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.STACK_NAME }}
          template: test/batch.yml
          role-arn:  arn:aws:iam::134847318362:role/CloudFormationAdmin
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: "CIEntityArn=arn:aws:iam::134847318362:user/AWSClusterManagers-jl,AutomaticTeardown=true"
          no-fail-on-empty-changeset: "1"

      - name: Export stack output
        run: |
          export AWS_DEFAULT_OUTPUT=text
          ECR_URI=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].Outputs[?OutputKey==`EcrUri`].OutputValue')
          echo "ECR_URI=${ECR_URI}" >> $GITHUB_ENV

      - name: Assume TestRole
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ env.STACK_NAME }}-TestRole
          role-duration-seconds: 7200

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info

  slack:
      name: Notify Slack Failure
      needs: test
      runs-on: ubuntu-latest
      if: always() && github.event_name == 'schedule'
      steps:
        - uses: technote-space/workflow-conclusion-action@v2
        - uses: voxmedia/github-action-slack-notify-build@v1
          if: env.WORKFLOW_CONCLUSION == 'failure'
          with:
            channel: nightly-dev
            status: FAILED
            color: danger
          env:
            SLACK_BOT_TOKEN: ${{ secrets.INVENIA_SLACK_BOT_TOKEN }}
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: "1"
      - run: |
          julia --project=docs -e '
            using Pkg
            Pkg.develop(PackageSpec(path=pwd()))
            Pkg.instantiate()'
      - run: |
          julia --project=docs -e '
            using Documenter: DocMeta, doctest
            using AWSClusterManagers
            DocMeta.setdocmeta!(AWSClusterManagers, :DocTestSetup, :(using AWSClusterManagers); recursive=true)
            doctest(AWSClusterManagers)'
      - run: julia --project=docs docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
